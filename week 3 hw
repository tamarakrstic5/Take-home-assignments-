import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
url = "https://data.cityofnewyork.us/api/views/6fi9-q3ta/rows.csv?accessType=DOWNLOAD"
df=pd.read_csv(url)
pd.to_datetime(df['hour_beginning'])
df['hour'] = df['hour_beginning'].dt.hour
df['month'] = df['hour_beginning'].dt.month
df['date'] = df['hour_beginning'].dt.date
df['day'] = df['hour_beginning'].dt.day_name()
df = df.sort_values(by='hour_beginning')
df.reset_index(drop=True, inplace=True)
df['temperature'] = df['temperature'].fillna(method="ffill")
df['precipitation'] = df['precipitation'].fillna(method="ffill")
df['weather_summary'] = df['weather_summary'].fillna(method="ffill")
weekdays=df['day_name'].dt.weekday
weekly_counts = df_weekdays.groupby('day')['Pedestrians'].sum()
ordered_days = ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday']
weekly_counts = weekly_counts.reindex(ordered_days)
plt.figure(figsize=(10, 6))
plt.plot(weekly_counts.index, weekly_counts.values, marker='o', color=blue)
plt.title('Pedestrian Counts by Day of the Week (Weekdays Only)')
plt.xlabel('Day of the Week')
plt.ylabel('Total Pedestrian Count')
plt.grid(True)
plt.tight_layout()
plt.show()


pedestrians_2019 = df[df['date'].dt.year == 2019]
merged_df = pd.merge(pedestrians_2019, weather_df, on='date')
weather_encoded = pd.get_dummies(merged_df['weather_summary'], prefix='weather')
combined_df = pd.concat([merged_df, weather_encoded], axis=1)
correlation_matrix = combined_df.corr()
plt.figure(figsize=(12, 8))
sns.heatmap(correlation_matrix, annot=True, cmap='coolwarm', fmt='.2f')
plt.title('Correlation Matrix')
plt.show()


def categorize_time_of_day(dt):
    if dt.hour < 6:
        return 'Night'
    elif 6 <= dt.hour < 12:
        return 'Morning'
    elif 12 <= dt.hour < 18:
        return 'Afternoon'
    else:
        return 'Evening'
df['time_of_day'] =df['date'].apply(categorize_time_of_day)
activity_by_time = pedestrian_df.groupby('time_of_day')['count'].sum().reset_index()
activity_by_time['time_of_day'] = pd.Categorical(activity_by_time['time_of_day'],
                                                  categories=['Morning', 'Afternoon', 'Evening', 'Night'],
                                                  ordered=True)
activity_by_time = activity_by_time.sort_values('time_of_day')
plt.figure(figsize=(10, 6))
sns.barplot(data=activity_by_time, x='time_of_day', y='count', palette='viridis')
plt.title('Total Pedestrian Counts by Time of Day')
plt.ylabel('Total Pedestrian Count')
plt.xlabel('Time of Day')
plt.tight_layout()
plt.show()




